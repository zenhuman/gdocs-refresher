/*
I've used this beauty several times as Google Docs doesn't have an innate "Refresh" command.  
The code here is for a WebApp, but can be easily modified for use in a spreadsheet-based script 
by removing the first three lines of code and substituting:

     var dataSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Sheet1");
     
Suppose "A1" to contain a formula (e.g. ImportXML from a website).
Suppose "A2" to contain some output that depends on A1.

This code works on the principle of cell "activation."  

It compares the contents of a cell, set by the user, 
with what GDocs considers the "active" contents of that cell.  

So long as these two are not equal, it waits.
*/

function Refresh() {

var Current_SSID = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" // your spreadsheet ID here
  
var dataSs = SpreadsheetApp.openById(Current_SSID);
var dataSheet = dataSs.getSheets()[0]; // [0] gets Sheet1

var outURL = dataSheet.getRange("a2");
var URLxi = outURL.getValue();

      var target = URLxi;

      var targetSwitch = dataSheet.getRange("a2").activate();
      targetSwitch;
      var active = dataSheet.getActiveRange().getValue();

var lookup = "=importXML('http://www.xkcd.com','//*')" // your formula here.

var range = dataSheet.getRange("a1"); // sets up next item in A2
var input = range.setFormula(lookup);
input;

      if (active === target) {} 
      else {
            do
            {var randomWait = Math.floor(Math.random()*100+50); Utilities.sleep(randomWait);}
            while (active =! target);
           }
}
